name: Deploy integration branch to INT

on:
  push:
    branches: [ development ]
    paths:
      - 'force-app/**'


jobs:

  run-pmd-scan:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      - name: 'Run PMD scan'
        uses: pmd/pmd-github-action@v1.4.0
        id: pmd
        with:
          version: '6.55.0'
          sourcePath: 'force-app'
          rulesets: 'ruleset.xml'
          
      - name: 'Check for PMD violations'
        if: steps.pmd.outputs.violations != 0
        run: exit 1

####################################
  validate-by-codescan:
    runs-on: ubuntu-latest
    needs: run-pmd-scan
    permissions:
      security-events: write
    steps:

      #- uses: actions/setup-node@v2
      #  with:
      #    node-version: '14'

      - name: 'Checkout source code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Install CLI'
        run: npm run force:cli

      - name: 'Installing sfdx git delta'
        run: npm run sfdx:delta

      - name: 'Installing java'
        run: npm run ubutnu:java

      - name: 'Installing SFDX scanner'
        run: mpn run sfdx:scaner"

      - name: 'Populate auth file with SFDX_URL secret of integration org'
        shell: bash
        run: |
          echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt

      - name: 'Run Auth Int'
        run: npm run force:auth

      - name: 'Create delta packages for new, modified or deleted metadata'
        run: mpn run createdelta

      - name: 'Scan code'
        run: mpn run scaner:run

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: changed-sources/apexScanResults.sarif

      #- name: 'Check-only deploy delta changes - run all tests'
      #  if: ${{ env.APEX_TESTS == 'all' }}
      #  run: |
      #    sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json

      #- name: 'Deploy destructive changes (if any)'
      #  run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings


  #########################################
  deploy-branch-to-int-tests:
    runs-on: ubuntu-latest
    needs: validate-by-codescan
    steps:
      # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

      # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
      - name: 'Installing sfdx git delta'
        run: |
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins 

      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Store secret for both otgs
      - name: 'Populate auth file with SFDX_URL secret of the integration and staging orgs'
        shell: bash
        run: |
          echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt

      - name: 'Create delta packages for new, modified or deleted metadata'
        run: |
          mkdir changed-sources
          sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

      # Authenticate to org
      - name: 'Authenticate to Integration Org'
        run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

      - name: 'Deploy the entire branch to Integration org'
        run: sfdx force:source:deploy -p force-app
